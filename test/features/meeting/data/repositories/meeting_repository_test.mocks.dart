// Mocks generated by Mockito 5.4.2 from annotations
// in waterbus/test/features/meeting/data/repositories/meeting_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

// Dart imports:
import 'dart:async' as _i3;

// Package imports:
import 'package:mockito/mockito.dart' as _i1;

// Project imports:
import 'package:waterbus/features/meeting/domain/entities/meeting.dart' as _i4;

import 'package:waterbus/features/meeting/data/datasources/meeting_local_datasource.dart'
    as _i5;
import 'package:waterbus/features/meeting/data/datasources/meeting_remote_datasource.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MeetingRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeetingRemoteDataSource extends _i1.Mock
    implements _i2.MeetingRemoteDataSource {
  @override
  _i3.Future<_i4.Meeting?> createMeeting({
    required _i4.Meeting? meeting,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMeeting,
          [],
          {
            #meeting: meeting,
            #password: password,
          },
        ),
        returnValue: _i3.Future<_i4.Meeting?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Meeting?>.value(),
      ) as _i3.Future<_i4.Meeting?>);
  @override
  _i3.Future<_i4.Meeting?> updateMeeting({
    required _i4.Meeting? meeting,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMeeting,
          [],
          {
            #meeting: meeting,
            #password: password,
          },
        ),
        returnValue: _i3.Future<_i4.Meeting?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Meeting?>.value(),
      ) as _i3.Future<_i4.Meeting?>);
  @override
  _i3.Future<_i4.Meeting?> joinMeeting({
    required _i4.Meeting? meeting,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinMeeting,
          [],
          {
            #meeting: meeting,
            #password: password,
          },
        ),
        returnValue: _i3.Future<_i4.Meeting?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Meeting?>.value(),
      ) as _i3.Future<_i4.Meeting?>);
  @override
  _i3.Future<_i4.Meeting?> getInfoMeeting(int? code) => (super.noSuchMethod(
        Invocation.method(
          #getInfoMeeting,
          [code],
        ),
        returnValue: _i3.Future<_i4.Meeting?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Meeting?>.value(),
      ) as _i3.Future<_i4.Meeting?>);
  @override
  _i3.Future<bool> leaveMeeting({
    required int? code,
    required int? participantId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveMeeting,
          [],
          {
            #code: code,
            #participantId: participantId,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [MeetingLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeetingLocalDataSource extends _i1.Mock
    implements _i5.MeetingLocalDataSource {
  @override
  List<_i4.Meeting> get meetings => (super.noSuchMethod(
        Invocation.getter(#meetings),
        returnValue: <_i4.Meeting>[],
        returnValueForMissingStub: <_i4.Meeting>[],
      ) as List<_i4.Meeting>);
  @override
  void addOrMeeting(_i4.Meeting? meeting) => super.noSuchMethod(
        Invocation.method(
          #addOrMeeting,
          [meeting],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeMeeting(int? code) => super.noSuchMethod(
        Invocation.method(
          #removeMeeting,
          [code],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAll() => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
